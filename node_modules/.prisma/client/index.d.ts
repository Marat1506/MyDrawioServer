
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Process
 * 
 */
export type Process = $Result.DefaultSelection<Prisma.$ProcessPayload>
/**
 * Model ProcessBlock
 * 
 */
export type ProcessBlock = $Result.DefaultSelection<Prisma.$ProcessBlockPayload>
/**
 * Model ProcessBlockRelation
 * 
 */
export type ProcessBlockRelation = $Result.DefaultSelection<Prisma.$ProcessBlockRelationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Processes
 * const processes = await prisma.process.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Processes
   * const processes = await prisma.process.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.process`: Exposes CRUD operations for the **Process** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Processes
    * const processes = await prisma.process.findMany()
    * ```
    */
  get process(): Prisma.ProcessDelegate<ExtArgs>;

  /**
   * `prisma.processBlock`: Exposes CRUD operations for the **ProcessBlock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProcessBlocks
    * const processBlocks = await prisma.processBlock.findMany()
    * ```
    */
  get processBlock(): Prisma.ProcessBlockDelegate<ExtArgs>;

  /**
   * `prisma.processBlockRelation`: Exposes CRUD operations for the **ProcessBlockRelation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProcessBlockRelations
    * const processBlockRelations = await prisma.processBlockRelation.findMany()
    * ```
    */
  get processBlockRelation(): Prisma.ProcessBlockRelationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Process: 'Process',
    ProcessBlock: 'ProcessBlock',
    ProcessBlockRelation: 'ProcessBlockRelation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "process" | "processBlock" | "processBlockRelation"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Process: {
        payload: Prisma.$ProcessPayload<ExtArgs>
        fields: Prisma.ProcessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProcessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProcessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          findFirst: {
            args: Prisma.ProcessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProcessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          findMany: {
            args: Prisma.ProcessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>[]
          }
          create: {
            args: Prisma.ProcessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          createMany: {
            args: Prisma.ProcessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProcessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>[]
          }
          delete: {
            args: Prisma.ProcessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          update: {
            args: Prisma.ProcessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          deleteMany: {
            args: Prisma.ProcessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProcessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProcessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          aggregate: {
            args: Prisma.ProcessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProcess>
          }
          groupBy: {
            args: Prisma.ProcessGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProcessGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProcessCountArgs<ExtArgs>
            result: $Utils.Optional<ProcessCountAggregateOutputType> | number
          }
        }
      }
      ProcessBlock: {
        payload: Prisma.$ProcessBlockPayload<ExtArgs>
        fields: Prisma.ProcessBlockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProcessBlockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProcessBlockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockPayload>
          }
          findFirst: {
            args: Prisma.ProcessBlockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProcessBlockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockPayload>
          }
          findMany: {
            args: Prisma.ProcessBlockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockPayload>[]
          }
          create: {
            args: Prisma.ProcessBlockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockPayload>
          }
          createMany: {
            args: Prisma.ProcessBlockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProcessBlockCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockPayload>[]
          }
          delete: {
            args: Prisma.ProcessBlockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockPayload>
          }
          update: {
            args: Prisma.ProcessBlockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockPayload>
          }
          deleteMany: {
            args: Prisma.ProcessBlockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProcessBlockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProcessBlockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockPayload>
          }
          aggregate: {
            args: Prisma.ProcessBlockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProcessBlock>
          }
          groupBy: {
            args: Prisma.ProcessBlockGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProcessBlockGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProcessBlockCountArgs<ExtArgs>
            result: $Utils.Optional<ProcessBlockCountAggregateOutputType> | number
          }
        }
      }
      ProcessBlockRelation: {
        payload: Prisma.$ProcessBlockRelationPayload<ExtArgs>
        fields: Prisma.ProcessBlockRelationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProcessBlockRelationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockRelationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProcessBlockRelationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockRelationPayload>
          }
          findFirst: {
            args: Prisma.ProcessBlockRelationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockRelationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProcessBlockRelationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockRelationPayload>
          }
          findMany: {
            args: Prisma.ProcessBlockRelationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockRelationPayload>[]
          }
          create: {
            args: Prisma.ProcessBlockRelationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockRelationPayload>
          }
          createMany: {
            args: Prisma.ProcessBlockRelationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProcessBlockRelationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockRelationPayload>[]
          }
          delete: {
            args: Prisma.ProcessBlockRelationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockRelationPayload>
          }
          update: {
            args: Prisma.ProcessBlockRelationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockRelationPayload>
          }
          deleteMany: {
            args: Prisma.ProcessBlockRelationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProcessBlockRelationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProcessBlockRelationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessBlockRelationPayload>
          }
          aggregate: {
            args: Prisma.ProcessBlockRelationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProcessBlockRelation>
          }
          groupBy: {
            args: Prisma.ProcessBlockRelationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProcessBlockRelationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProcessBlockRelationCountArgs<ExtArgs>
            result: $Utils.Optional<ProcessBlockRelationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProcessCountOutputType
   */

  export type ProcessCountOutputType = {
    blocks: number
  }

  export type ProcessCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    blocks?: boolean | ProcessCountOutputTypeCountBlocksArgs
  }

  // Custom InputTypes
  /**
   * ProcessCountOutputType without action
   */
  export type ProcessCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessCountOutputType
     */
    select?: ProcessCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProcessCountOutputType without action
   */
  export type ProcessCountOutputTypeCountBlocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessBlockWhereInput
  }


  /**
   * Count Type ProcessBlockCountOutputType
   */

  export type ProcessBlockCountOutputType = {
    outputs: number
    inputs: number
  }

  export type ProcessBlockCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outputs?: boolean | ProcessBlockCountOutputTypeCountOutputsArgs
    inputs?: boolean | ProcessBlockCountOutputTypeCountInputsArgs
  }

  // Custom InputTypes
  /**
   * ProcessBlockCountOutputType without action
   */
  export type ProcessBlockCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlockCountOutputType
     */
    select?: ProcessBlockCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProcessBlockCountOutputType without action
   */
  export type ProcessBlockCountOutputTypeCountOutputsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessBlockRelationWhereInput
  }

  /**
   * ProcessBlockCountOutputType without action
   */
  export type ProcessBlockCountOutputTypeCountInputsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessBlockRelationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Process
   */

  export type AggregateProcess = {
    _count: ProcessCountAggregateOutputType | null
    _min: ProcessMinAggregateOutputType | null
    _max: ProcessMaxAggregateOutputType | null
  }

  export type ProcessMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type ProcessMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type ProcessCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ProcessMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ProcessMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ProcessCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ProcessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Process to aggregate.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Processes
    **/
    _count?: true | ProcessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcessMaxAggregateInputType
  }

  export type GetProcessAggregateType<T extends ProcessAggregateArgs> = {
        [P in keyof T & keyof AggregateProcess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcess[P]>
      : GetScalarType<T[P], AggregateProcess[P]>
  }




  export type ProcessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessWhereInput
    orderBy?: ProcessOrderByWithAggregationInput | ProcessOrderByWithAggregationInput[]
    by: ProcessScalarFieldEnum[] | ProcessScalarFieldEnum
    having?: ProcessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcessCountAggregateInputType | true
    _min?: ProcessMinAggregateInputType
    _max?: ProcessMaxAggregateInputType
  }

  export type ProcessGroupByOutputType = {
    id: string
    name: string
    _count: ProcessCountAggregateOutputType | null
    _min: ProcessMinAggregateOutputType | null
    _max: ProcessMaxAggregateOutputType | null
  }

  type GetProcessGroupByPayload<T extends ProcessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcessGroupByOutputType[P]>
            : GetScalarType<T[P], ProcessGroupByOutputType[P]>
        }
      >
    >


  export type ProcessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    blocks?: boolean | Process$blocksArgs<ExtArgs>
    _count?: boolean | ProcessCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["process"]>

  export type ProcessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["process"]>

  export type ProcessSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ProcessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    blocks?: boolean | Process$blocksArgs<ExtArgs>
    _count?: boolean | ProcessCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProcessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProcessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Process"
    objects: {
      blocks: Prisma.$ProcessBlockPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["process"]>
    composites: {}
  }

  type ProcessGetPayload<S extends boolean | null | undefined | ProcessDefaultArgs> = $Result.GetResult<Prisma.$ProcessPayload, S>

  type ProcessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProcessFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProcessCountAggregateInputType | true
    }

  export interface ProcessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Process'], meta: { name: 'Process' } }
    /**
     * Find zero or one Process that matches the filter.
     * @param {ProcessFindUniqueArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProcessFindUniqueArgs>(args: SelectSubset<T, ProcessFindUniqueArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Process that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProcessFindUniqueOrThrowArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProcessFindUniqueOrThrowArgs>(args: SelectSubset<T, ProcessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Process that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFindFirstArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProcessFindFirstArgs>(args?: SelectSubset<T, ProcessFindFirstArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Process that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFindFirstOrThrowArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProcessFindFirstOrThrowArgs>(args?: SelectSubset<T, ProcessFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Processes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Processes
     * const processes = await prisma.process.findMany()
     * 
     * // Get first 10 Processes
     * const processes = await prisma.process.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const processWithIdOnly = await prisma.process.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProcessFindManyArgs>(args?: SelectSubset<T, ProcessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Process.
     * @param {ProcessCreateArgs} args - Arguments to create a Process.
     * @example
     * // Create one Process
     * const Process = await prisma.process.create({
     *   data: {
     *     // ... data to create a Process
     *   }
     * })
     * 
     */
    create<T extends ProcessCreateArgs>(args: SelectSubset<T, ProcessCreateArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Processes.
     * @param {ProcessCreateManyArgs} args - Arguments to create many Processes.
     * @example
     * // Create many Processes
     * const process = await prisma.process.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProcessCreateManyArgs>(args?: SelectSubset<T, ProcessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Processes and returns the data saved in the database.
     * @param {ProcessCreateManyAndReturnArgs} args - Arguments to create many Processes.
     * @example
     * // Create many Processes
     * const process = await prisma.process.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Processes and only return the `id`
     * const processWithIdOnly = await prisma.process.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProcessCreateManyAndReturnArgs>(args?: SelectSubset<T, ProcessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Process.
     * @param {ProcessDeleteArgs} args - Arguments to delete one Process.
     * @example
     * // Delete one Process
     * const Process = await prisma.process.delete({
     *   where: {
     *     // ... filter to delete one Process
     *   }
     * })
     * 
     */
    delete<T extends ProcessDeleteArgs>(args: SelectSubset<T, ProcessDeleteArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Process.
     * @param {ProcessUpdateArgs} args - Arguments to update one Process.
     * @example
     * // Update one Process
     * const process = await prisma.process.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProcessUpdateArgs>(args: SelectSubset<T, ProcessUpdateArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Processes.
     * @param {ProcessDeleteManyArgs} args - Arguments to filter Processes to delete.
     * @example
     * // Delete a few Processes
     * const { count } = await prisma.process.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProcessDeleteManyArgs>(args?: SelectSubset<T, ProcessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Processes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Processes
     * const process = await prisma.process.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProcessUpdateManyArgs>(args: SelectSubset<T, ProcessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Process.
     * @param {ProcessUpsertArgs} args - Arguments to update or create a Process.
     * @example
     * // Update or create a Process
     * const process = await prisma.process.upsert({
     *   create: {
     *     // ... data to create a Process
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Process we want to update
     *   }
     * })
     */
    upsert<T extends ProcessUpsertArgs>(args: SelectSubset<T, ProcessUpsertArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Processes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessCountArgs} args - Arguments to filter Processes to count.
     * @example
     * // Count the number of Processes
     * const count = await prisma.process.count({
     *   where: {
     *     // ... the filter for the Processes we want to count
     *   }
     * })
    **/
    count<T extends ProcessCountArgs>(
      args?: Subset<T, ProcessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Process.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcessAggregateArgs>(args: Subset<T, ProcessAggregateArgs>): Prisma.PrismaPromise<GetProcessAggregateType<T>>

    /**
     * Group by Process.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProcessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProcessGroupByArgs['orderBy'] }
        : { orderBy?: ProcessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProcessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Process model
   */
  readonly fields: ProcessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Process.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProcessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    blocks<T extends Process$blocksArgs<ExtArgs> = {}>(args?: Subset<T, Process$blocksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessBlockPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Process model
   */ 
  interface ProcessFieldRefs {
    readonly id: FieldRef<"Process", 'String'>
    readonly name: FieldRef<"Process", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Process findUnique
   */
  export type ProcessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process findUniqueOrThrow
   */
  export type ProcessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process findFirst
   */
  export type ProcessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Processes.
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Processes.
     */
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * Process findFirstOrThrow
   */
  export type ProcessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Processes.
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Processes.
     */
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * Process findMany
   */
  export type ProcessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Processes to fetch.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Processes.
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * Process create
   */
  export type ProcessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * The data needed to create a Process.
     */
    data: XOR<ProcessCreateInput, ProcessUncheckedCreateInput>
  }

  /**
   * Process createMany
   */
  export type ProcessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Processes.
     */
    data: ProcessCreateManyInput | ProcessCreateManyInput[]
  }

  /**
   * Process createManyAndReturn
   */
  export type ProcessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Processes.
     */
    data: ProcessCreateManyInput | ProcessCreateManyInput[]
  }

  /**
   * Process update
   */
  export type ProcessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * The data needed to update a Process.
     */
    data: XOR<ProcessUpdateInput, ProcessUncheckedUpdateInput>
    /**
     * Choose, which Process to update.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process updateMany
   */
  export type ProcessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Processes.
     */
    data: XOR<ProcessUpdateManyMutationInput, ProcessUncheckedUpdateManyInput>
    /**
     * Filter which Processes to update
     */
    where?: ProcessWhereInput
  }

  /**
   * Process upsert
   */
  export type ProcessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * The filter to search for the Process to update in case it exists.
     */
    where: ProcessWhereUniqueInput
    /**
     * In case the Process found by the `where` argument doesn't exist, create a new Process with this data.
     */
    create: XOR<ProcessCreateInput, ProcessUncheckedCreateInput>
    /**
     * In case the Process was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProcessUpdateInput, ProcessUncheckedUpdateInput>
  }

  /**
   * Process delete
   */
  export type ProcessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter which Process to delete.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process deleteMany
   */
  export type ProcessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Processes to delete
     */
    where?: ProcessWhereInput
  }

  /**
   * Process.blocks
   */
  export type Process$blocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlock
     */
    select?: ProcessBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockInclude<ExtArgs> | null
    where?: ProcessBlockWhereInput
    orderBy?: ProcessBlockOrderByWithRelationInput | ProcessBlockOrderByWithRelationInput[]
    cursor?: ProcessBlockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessBlockScalarFieldEnum | ProcessBlockScalarFieldEnum[]
  }

  /**
   * Process without action
   */
  export type ProcessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
  }


  /**
   * Model ProcessBlock
   */

  export type AggregateProcessBlock = {
    _count: ProcessBlockCountAggregateOutputType | null
    _avg: ProcessBlockAvgAggregateOutputType | null
    _sum: ProcessBlockSumAggregateOutputType | null
    _min: ProcessBlockMinAggregateOutputType | null
    _max: ProcessBlockMaxAggregateOutputType | null
  }

  export type ProcessBlockAvgAggregateOutputType = {
    x: number | null
    y: number | null
  }

  export type ProcessBlockSumAggregateOutputType = {
    x: number | null
    y: number | null
  }

  export type ProcessBlockMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    data: string | null
    x: number | null
    y: number | null
    processId: string | null
  }

  export type ProcessBlockMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    data: string | null
    x: number | null
    y: number | null
    processId: string | null
  }

  export type ProcessBlockCountAggregateOutputType = {
    id: number
    name: number
    type: number
    data: number
    x: number
    y: number
    processId: number
    _all: number
  }


  export type ProcessBlockAvgAggregateInputType = {
    x?: true
    y?: true
  }

  export type ProcessBlockSumAggregateInputType = {
    x?: true
    y?: true
  }

  export type ProcessBlockMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    data?: true
    x?: true
    y?: true
    processId?: true
  }

  export type ProcessBlockMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    data?: true
    x?: true
    y?: true
    processId?: true
  }

  export type ProcessBlockCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    data?: true
    x?: true
    y?: true
    processId?: true
    _all?: true
  }

  export type ProcessBlockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProcessBlock to aggregate.
     */
    where?: ProcessBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessBlocks to fetch.
     */
    orderBy?: ProcessBlockOrderByWithRelationInput | ProcessBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProcessBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProcessBlocks
    **/
    _count?: true | ProcessBlockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProcessBlockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProcessBlockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcessBlockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcessBlockMaxAggregateInputType
  }

  export type GetProcessBlockAggregateType<T extends ProcessBlockAggregateArgs> = {
        [P in keyof T & keyof AggregateProcessBlock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcessBlock[P]>
      : GetScalarType<T[P], AggregateProcessBlock[P]>
  }




  export type ProcessBlockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessBlockWhereInput
    orderBy?: ProcessBlockOrderByWithAggregationInput | ProcessBlockOrderByWithAggregationInput[]
    by: ProcessBlockScalarFieldEnum[] | ProcessBlockScalarFieldEnum
    having?: ProcessBlockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcessBlockCountAggregateInputType | true
    _avg?: ProcessBlockAvgAggregateInputType
    _sum?: ProcessBlockSumAggregateInputType
    _min?: ProcessBlockMinAggregateInputType
    _max?: ProcessBlockMaxAggregateInputType
  }

  export type ProcessBlockGroupByOutputType = {
    id: string
    name: string
    type: string
    data: string
    x: number
    y: number
    processId: string
    _count: ProcessBlockCountAggregateOutputType | null
    _avg: ProcessBlockAvgAggregateOutputType | null
    _sum: ProcessBlockSumAggregateOutputType | null
    _min: ProcessBlockMinAggregateOutputType | null
    _max: ProcessBlockMaxAggregateOutputType | null
  }

  type GetProcessBlockGroupByPayload<T extends ProcessBlockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcessBlockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcessBlockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcessBlockGroupByOutputType[P]>
            : GetScalarType<T[P], ProcessBlockGroupByOutputType[P]>
        }
      >
    >


  export type ProcessBlockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    data?: boolean
    x?: boolean
    y?: boolean
    processId?: boolean
    process?: boolean | ProcessDefaultArgs<ExtArgs>
    outputs?: boolean | ProcessBlock$outputsArgs<ExtArgs>
    inputs?: boolean | ProcessBlock$inputsArgs<ExtArgs>
    _count?: boolean | ProcessBlockCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["processBlock"]>

  export type ProcessBlockSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    data?: boolean
    x?: boolean
    y?: boolean
    processId?: boolean
    process?: boolean | ProcessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["processBlock"]>

  export type ProcessBlockSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    data?: boolean
    x?: boolean
    y?: boolean
    processId?: boolean
  }

  export type ProcessBlockInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    process?: boolean | ProcessDefaultArgs<ExtArgs>
    outputs?: boolean | ProcessBlock$outputsArgs<ExtArgs>
    inputs?: boolean | ProcessBlock$inputsArgs<ExtArgs>
    _count?: boolean | ProcessBlockCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProcessBlockIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    process?: boolean | ProcessDefaultArgs<ExtArgs>
  }

  export type $ProcessBlockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProcessBlock"
    objects: {
      process: Prisma.$ProcessPayload<ExtArgs>
      outputs: Prisma.$ProcessBlockRelationPayload<ExtArgs>[]
      inputs: Prisma.$ProcessBlockRelationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      data: string
      x: number
      y: number
      processId: string
    }, ExtArgs["result"]["processBlock"]>
    composites: {}
  }

  type ProcessBlockGetPayload<S extends boolean | null | undefined | ProcessBlockDefaultArgs> = $Result.GetResult<Prisma.$ProcessBlockPayload, S>

  type ProcessBlockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProcessBlockFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProcessBlockCountAggregateInputType | true
    }

  export interface ProcessBlockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProcessBlock'], meta: { name: 'ProcessBlock' } }
    /**
     * Find zero or one ProcessBlock that matches the filter.
     * @param {ProcessBlockFindUniqueArgs} args - Arguments to find a ProcessBlock
     * @example
     * // Get one ProcessBlock
     * const processBlock = await prisma.processBlock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProcessBlockFindUniqueArgs>(args: SelectSubset<T, ProcessBlockFindUniqueArgs<ExtArgs>>): Prisma__ProcessBlockClient<$Result.GetResult<Prisma.$ProcessBlockPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProcessBlock that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProcessBlockFindUniqueOrThrowArgs} args - Arguments to find a ProcessBlock
     * @example
     * // Get one ProcessBlock
     * const processBlock = await prisma.processBlock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProcessBlockFindUniqueOrThrowArgs>(args: SelectSubset<T, ProcessBlockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProcessBlockClient<$Result.GetResult<Prisma.$ProcessBlockPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProcessBlock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessBlockFindFirstArgs} args - Arguments to find a ProcessBlock
     * @example
     * // Get one ProcessBlock
     * const processBlock = await prisma.processBlock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProcessBlockFindFirstArgs>(args?: SelectSubset<T, ProcessBlockFindFirstArgs<ExtArgs>>): Prisma__ProcessBlockClient<$Result.GetResult<Prisma.$ProcessBlockPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProcessBlock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessBlockFindFirstOrThrowArgs} args - Arguments to find a ProcessBlock
     * @example
     * // Get one ProcessBlock
     * const processBlock = await prisma.processBlock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProcessBlockFindFirstOrThrowArgs>(args?: SelectSubset<T, ProcessBlockFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProcessBlockClient<$Result.GetResult<Prisma.$ProcessBlockPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProcessBlocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessBlockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProcessBlocks
     * const processBlocks = await prisma.processBlock.findMany()
     * 
     * // Get first 10 ProcessBlocks
     * const processBlocks = await prisma.processBlock.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const processBlockWithIdOnly = await prisma.processBlock.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProcessBlockFindManyArgs>(args?: SelectSubset<T, ProcessBlockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessBlockPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProcessBlock.
     * @param {ProcessBlockCreateArgs} args - Arguments to create a ProcessBlock.
     * @example
     * // Create one ProcessBlock
     * const ProcessBlock = await prisma.processBlock.create({
     *   data: {
     *     // ... data to create a ProcessBlock
     *   }
     * })
     * 
     */
    create<T extends ProcessBlockCreateArgs>(args: SelectSubset<T, ProcessBlockCreateArgs<ExtArgs>>): Prisma__ProcessBlockClient<$Result.GetResult<Prisma.$ProcessBlockPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProcessBlocks.
     * @param {ProcessBlockCreateManyArgs} args - Arguments to create many ProcessBlocks.
     * @example
     * // Create many ProcessBlocks
     * const processBlock = await prisma.processBlock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProcessBlockCreateManyArgs>(args?: SelectSubset<T, ProcessBlockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProcessBlocks and returns the data saved in the database.
     * @param {ProcessBlockCreateManyAndReturnArgs} args - Arguments to create many ProcessBlocks.
     * @example
     * // Create many ProcessBlocks
     * const processBlock = await prisma.processBlock.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProcessBlocks and only return the `id`
     * const processBlockWithIdOnly = await prisma.processBlock.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProcessBlockCreateManyAndReturnArgs>(args?: SelectSubset<T, ProcessBlockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessBlockPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProcessBlock.
     * @param {ProcessBlockDeleteArgs} args - Arguments to delete one ProcessBlock.
     * @example
     * // Delete one ProcessBlock
     * const ProcessBlock = await prisma.processBlock.delete({
     *   where: {
     *     // ... filter to delete one ProcessBlock
     *   }
     * })
     * 
     */
    delete<T extends ProcessBlockDeleteArgs>(args: SelectSubset<T, ProcessBlockDeleteArgs<ExtArgs>>): Prisma__ProcessBlockClient<$Result.GetResult<Prisma.$ProcessBlockPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProcessBlock.
     * @param {ProcessBlockUpdateArgs} args - Arguments to update one ProcessBlock.
     * @example
     * // Update one ProcessBlock
     * const processBlock = await prisma.processBlock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProcessBlockUpdateArgs>(args: SelectSubset<T, ProcessBlockUpdateArgs<ExtArgs>>): Prisma__ProcessBlockClient<$Result.GetResult<Prisma.$ProcessBlockPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProcessBlocks.
     * @param {ProcessBlockDeleteManyArgs} args - Arguments to filter ProcessBlocks to delete.
     * @example
     * // Delete a few ProcessBlocks
     * const { count } = await prisma.processBlock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProcessBlockDeleteManyArgs>(args?: SelectSubset<T, ProcessBlockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProcessBlocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessBlockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProcessBlocks
     * const processBlock = await prisma.processBlock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProcessBlockUpdateManyArgs>(args: SelectSubset<T, ProcessBlockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProcessBlock.
     * @param {ProcessBlockUpsertArgs} args - Arguments to update or create a ProcessBlock.
     * @example
     * // Update or create a ProcessBlock
     * const processBlock = await prisma.processBlock.upsert({
     *   create: {
     *     // ... data to create a ProcessBlock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProcessBlock we want to update
     *   }
     * })
     */
    upsert<T extends ProcessBlockUpsertArgs>(args: SelectSubset<T, ProcessBlockUpsertArgs<ExtArgs>>): Prisma__ProcessBlockClient<$Result.GetResult<Prisma.$ProcessBlockPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProcessBlocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessBlockCountArgs} args - Arguments to filter ProcessBlocks to count.
     * @example
     * // Count the number of ProcessBlocks
     * const count = await prisma.processBlock.count({
     *   where: {
     *     // ... the filter for the ProcessBlocks we want to count
     *   }
     * })
    **/
    count<T extends ProcessBlockCountArgs>(
      args?: Subset<T, ProcessBlockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcessBlockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProcessBlock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessBlockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcessBlockAggregateArgs>(args: Subset<T, ProcessBlockAggregateArgs>): Prisma.PrismaPromise<GetProcessBlockAggregateType<T>>

    /**
     * Group by ProcessBlock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessBlockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProcessBlockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProcessBlockGroupByArgs['orderBy'] }
        : { orderBy?: ProcessBlockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProcessBlockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessBlockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProcessBlock model
   */
  readonly fields: ProcessBlockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProcessBlock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProcessBlockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    process<T extends ProcessDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProcessDefaultArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    outputs<T extends ProcessBlock$outputsArgs<ExtArgs> = {}>(args?: Subset<T, ProcessBlock$outputsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessBlockRelationPayload<ExtArgs>, T, "findMany"> | Null>
    inputs<T extends ProcessBlock$inputsArgs<ExtArgs> = {}>(args?: Subset<T, ProcessBlock$inputsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessBlockRelationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProcessBlock model
   */ 
  interface ProcessBlockFieldRefs {
    readonly id: FieldRef<"ProcessBlock", 'String'>
    readonly name: FieldRef<"ProcessBlock", 'String'>
    readonly type: FieldRef<"ProcessBlock", 'String'>
    readonly data: FieldRef<"ProcessBlock", 'String'>
    readonly x: FieldRef<"ProcessBlock", 'Float'>
    readonly y: FieldRef<"ProcessBlock", 'Float'>
    readonly processId: FieldRef<"ProcessBlock", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProcessBlock findUnique
   */
  export type ProcessBlockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlock
     */
    select?: ProcessBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockInclude<ExtArgs> | null
    /**
     * Filter, which ProcessBlock to fetch.
     */
    where: ProcessBlockWhereUniqueInput
  }

  /**
   * ProcessBlock findUniqueOrThrow
   */
  export type ProcessBlockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlock
     */
    select?: ProcessBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockInclude<ExtArgs> | null
    /**
     * Filter, which ProcessBlock to fetch.
     */
    where: ProcessBlockWhereUniqueInput
  }

  /**
   * ProcessBlock findFirst
   */
  export type ProcessBlockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlock
     */
    select?: ProcessBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockInclude<ExtArgs> | null
    /**
     * Filter, which ProcessBlock to fetch.
     */
    where?: ProcessBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessBlocks to fetch.
     */
    orderBy?: ProcessBlockOrderByWithRelationInput | ProcessBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProcessBlocks.
     */
    cursor?: ProcessBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProcessBlocks.
     */
    distinct?: ProcessBlockScalarFieldEnum | ProcessBlockScalarFieldEnum[]
  }

  /**
   * ProcessBlock findFirstOrThrow
   */
  export type ProcessBlockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlock
     */
    select?: ProcessBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockInclude<ExtArgs> | null
    /**
     * Filter, which ProcessBlock to fetch.
     */
    where?: ProcessBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessBlocks to fetch.
     */
    orderBy?: ProcessBlockOrderByWithRelationInput | ProcessBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProcessBlocks.
     */
    cursor?: ProcessBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProcessBlocks.
     */
    distinct?: ProcessBlockScalarFieldEnum | ProcessBlockScalarFieldEnum[]
  }

  /**
   * ProcessBlock findMany
   */
  export type ProcessBlockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlock
     */
    select?: ProcessBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockInclude<ExtArgs> | null
    /**
     * Filter, which ProcessBlocks to fetch.
     */
    where?: ProcessBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessBlocks to fetch.
     */
    orderBy?: ProcessBlockOrderByWithRelationInput | ProcessBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProcessBlocks.
     */
    cursor?: ProcessBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessBlocks.
     */
    skip?: number
    distinct?: ProcessBlockScalarFieldEnum | ProcessBlockScalarFieldEnum[]
  }

  /**
   * ProcessBlock create
   */
  export type ProcessBlockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlock
     */
    select?: ProcessBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockInclude<ExtArgs> | null
    /**
     * The data needed to create a ProcessBlock.
     */
    data: XOR<ProcessBlockCreateInput, ProcessBlockUncheckedCreateInput>
  }

  /**
   * ProcessBlock createMany
   */
  export type ProcessBlockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProcessBlocks.
     */
    data: ProcessBlockCreateManyInput | ProcessBlockCreateManyInput[]
  }

  /**
   * ProcessBlock createManyAndReturn
   */
  export type ProcessBlockCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlock
     */
    select?: ProcessBlockSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProcessBlocks.
     */
    data: ProcessBlockCreateManyInput | ProcessBlockCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProcessBlock update
   */
  export type ProcessBlockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlock
     */
    select?: ProcessBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockInclude<ExtArgs> | null
    /**
     * The data needed to update a ProcessBlock.
     */
    data: XOR<ProcessBlockUpdateInput, ProcessBlockUncheckedUpdateInput>
    /**
     * Choose, which ProcessBlock to update.
     */
    where: ProcessBlockWhereUniqueInput
  }

  /**
   * ProcessBlock updateMany
   */
  export type ProcessBlockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProcessBlocks.
     */
    data: XOR<ProcessBlockUpdateManyMutationInput, ProcessBlockUncheckedUpdateManyInput>
    /**
     * Filter which ProcessBlocks to update
     */
    where?: ProcessBlockWhereInput
  }

  /**
   * ProcessBlock upsert
   */
  export type ProcessBlockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlock
     */
    select?: ProcessBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockInclude<ExtArgs> | null
    /**
     * The filter to search for the ProcessBlock to update in case it exists.
     */
    where: ProcessBlockWhereUniqueInput
    /**
     * In case the ProcessBlock found by the `where` argument doesn't exist, create a new ProcessBlock with this data.
     */
    create: XOR<ProcessBlockCreateInput, ProcessBlockUncheckedCreateInput>
    /**
     * In case the ProcessBlock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProcessBlockUpdateInput, ProcessBlockUncheckedUpdateInput>
  }

  /**
   * ProcessBlock delete
   */
  export type ProcessBlockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlock
     */
    select?: ProcessBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockInclude<ExtArgs> | null
    /**
     * Filter which ProcessBlock to delete.
     */
    where: ProcessBlockWhereUniqueInput
  }

  /**
   * ProcessBlock deleteMany
   */
  export type ProcessBlockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProcessBlocks to delete
     */
    where?: ProcessBlockWhereInput
  }

  /**
   * ProcessBlock.outputs
   */
  export type ProcessBlock$outputsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlockRelation
     */
    select?: ProcessBlockRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockRelationInclude<ExtArgs> | null
    where?: ProcessBlockRelationWhereInput
    orderBy?: ProcessBlockRelationOrderByWithRelationInput | ProcessBlockRelationOrderByWithRelationInput[]
    cursor?: ProcessBlockRelationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessBlockRelationScalarFieldEnum | ProcessBlockRelationScalarFieldEnum[]
  }

  /**
   * ProcessBlock.inputs
   */
  export type ProcessBlock$inputsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlockRelation
     */
    select?: ProcessBlockRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockRelationInclude<ExtArgs> | null
    where?: ProcessBlockRelationWhereInput
    orderBy?: ProcessBlockRelationOrderByWithRelationInput | ProcessBlockRelationOrderByWithRelationInput[]
    cursor?: ProcessBlockRelationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessBlockRelationScalarFieldEnum | ProcessBlockRelationScalarFieldEnum[]
  }

  /**
   * ProcessBlock without action
   */
  export type ProcessBlockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlock
     */
    select?: ProcessBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockInclude<ExtArgs> | null
  }


  /**
   * Model ProcessBlockRelation
   */

  export type AggregateProcessBlockRelation = {
    _count: ProcessBlockRelationCountAggregateOutputType | null
    _min: ProcessBlockRelationMinAggregateOutputType | null
    _max: ProcessBlockRelationMaxAggregateOutputType | null
  }

  export type ProcessBlockRelationMinAggregateOutputType = {
    id: string | null
    outputId: string | null
    outputPort: string | null
    inputId: string | null
    inputPort: string | null
  }

  export type ProcessBlockRelationMaxAggregateOutputType = {
    id: string | null
    outputId: string | null
    outputPort: string | null
    inputId: string | null
    inputPort: string | null
  }

  export type ProcessBlockRelationCountAggregateOutputType = {
    id: number
    outputId: number
    outputPort: number
    inputId: number
    inputPort: number
    _all: number
  }


  export type ProcessBlockRelationMinAggregateInputType = {
    id?: true
    outputId?: true
    outputPort?: true
    inputId?: true
    inputPort?: true
  }

  export type ProcessBlockRelationMaxAggregateInputType = {
    id?: true
    outputId?: true
    outputPort?: true
    inputId?: true
    inputPort?: true
  }

  export type ProcessBlockRelationCountAggregateInputType = {
    id?: true
    outputId?: true
    outputPort?: true
    inputId?: true
    inputPort?: true
    _all?: true
  }

  export type ProcessBlockRelationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProcessBlockRelation to aggregate.
     */
    where?: ProcessBlockRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessBlockRelations to fetch.
     */
    orderBy?: ProcessBlockRelationOrderByWithRelationInput | ProcessBlockRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProcessBlockRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessBlockRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessBlockRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProcessBlockRelations
    **/
    _count?: true | ProcessBlockRelationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcessBlockRelationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcessBlockRelationMaxAggregateInputType
  }

  export type GetProcessBlockRelationAggregateType<T extends ProcessBlockRelationAggregateArgs> = {
        [P in keyof T & keyof AggregateProcessBlockRelation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcessBlockRelation[P]>
      : GetScalarType<T[P], AggregateProcessBlockRelation[P]>
  }




  export type ProcessBlockRelationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessBlockRelationWhereInput
    orderBy?: ProcessBlockRelationOrderByWithAggregationInput | ProcessBlockRelationOrderByWithAggregationInput[]
    by: ProcessBlockRelationScalarFieldEnum[] | ProcessBlockRelationScalarFieldEnum
    having?: ProcessBlockRelationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcessBlockRelationCountAggregateInputType | true
    _min?: ProcessBlockRelationMinAggregateInputType
    _max?: ProcessBlockRelationMaxAggregateInputType
  }

  export type ProcessBlockRelationGroupByOutputType = {
    id: string
    outputId: string
    outputPort: string
    inputId: string
    inputPort: string
    _count: ProcessBlockRelationCountAggregateOutputType | null
    _min: ProcessBlockRelationMinAggregateOutputType | null
    _max: ProcessBlockRelationMaxAggregateOutputType | null
  }

  type GetProcessBlockRelationGroupByPayload<T extends ProcessBlockRelationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcessBlockRelationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcessBlockRelationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcessBlockRelationGroupByOutputType[P]>
            : GetScalarType<T[P], ProcessBlockRelationGroupByOutputType[P]>
        }
      >
    >


  export type ProcessBlockRelationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    outputId?: boolean
    outputPort?: boolean
    inputId?: boolean
    inputPort?: boolean
    output?: boolean | ProcessBlockDefaultArgs<ExtArgs>
    input?: boolean | ProcessBlockDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["processBlockRelation"]>

  export type ProcessBlockRelationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    outputId?: boolean
    outputPort?: boolean
    inputId?: boolean
    inputPort?: boolean
    output?: boolean | ProcessBlockDefaultArgs<ExtArgs>
    input?: boolean | ProcessBlockDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["processBlockRelation"]>

  export type ProcessBlockRelationSelectScalar = {
    id?: boolean
    outputId?: boolean
    outputPort?: boolean
    inputId?: boolean
    inputPort?: boolean
  }

  export type ProcessBlockRelationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    output?: boolean | ProcessBlockDefaultArgs<ExtArgs>
    input?: boolean | ProcessBlockDefaultArgs<ExtArgs>
  }
  export type ProcessBlockRelationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    output?: boolean | ProcessBlockDefaultArgs<ExtArgs>
    input?: boolean | ProcessBlockDefaultArgs<ExtArgs>
  }

  export type $ProcessBlockRelationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProcessBlockRelation"
    objects: {
      output: Prisma.$ProcessBlockPayload<ExtArgs>
      input: Prisma.$ProcessBlockPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      outputId: string
      outputPort: string
      inputId: string
      inputPort: string
    }, ExtArgs["result"]["processBlockRelation"]>
    composites: {}
  }

  type ProcessBlockRelationGetPayload<S extends boolean | null | undefined | ProcessBlockRelationDefaultArgs> = $Result.GetResult<Prisma.$ProcessBlockRelationPayload, S>

  type ProcessBlockRelationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProcessBlockRelationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProcessBlockRelationCountAggregateInputType | true
    }

  export interface ProcessBlockRelationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProcessBlockRelation'], meta: { name: 'ProcessBlockRelation' } }
    /**
     * Find zero or one ProcessBlockRelation that matches the filter.
     * @param {ProcessBlockRelationFindUniqueArgs} args - Arguments to find a ProcessBlockRelation
     * @example
     * // Get one ProcessBlockRelation
     * const processBlockRelation = await prisma.processBlockRelation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProcessBlockRelationFindUniqueArgs>(args: SelectSubset<T, ProcessBlockRelationFindUniqueArgs<ExtArgs>>): Prisma__ProcessBlockRelationClient<$Result.GetResult<Prisma.$ProcessBlockRelationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProcessBlockRelation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProcessBlockRelationFindUniqueOrThrowArgs} args - Arguments to find a ProcessBlockRelation
     * @example
     * // Get one ProcessBlockRelation
     * const processBlockRelation = await prisma.processBlockRelation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProcessBlockRelationFindUniqueOrThrowArgs>(args: SelectSubset<T, ProcessBlockRelationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProcessBlockRelationClient<$Result.GetResult<Prisma.$ProcessBlockRelationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProcessBlockRelation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessBlockRelationFindFirstArgs} args - Arguments to find a ProcessBlockRelation
     * @example
     * // Get one ProcessBlockRelation
     * const processBlockRelation = await prisma.processBlockRelation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProcessBlockRelationFindFirstArgs>(args?: SelectSubset<T, ProcessBlockRelationFindFirstArgs<ExtArgs>>): Prisma__ProcessBlockRelationClient<$Result.GetResult<Prisma.$ProcessBlockRelationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProcessBlockRelation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessBlockRelationFindFirstOrThrowArgs} args - Arguments to find a ProcessBlockRelation
     * @example
     * // Get one ProcessBlockRelation
     * const processBlockRelation = await prisma.processBlockRelation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProcessBlockRelationFindFirstOrThrowArgs>(args?: SelectSubset<T, ProcessBlockRelationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProcessBlockRelationClient<$Result.GetResult<Prisma.$ProcessBlockRelationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProcessBlockRelations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessBlockRelationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProcessBlockRelations
     * const processBlockRelations = await prisma.processBlockRelation.findMany()
     * 
     * // Get first 10 ProcessBlockRelations
     * const processBlockRelations = await prisma.processBlockRelation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const processBlockRelationWithIdOnly = await prisma.processBlockRelation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProcessBlockRelationFindManyArgs>(args?: SelectSubset<T, ProcessBlockRelationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessBlockRelationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProcessBlockRelation.
     * @param {ProcessBlockRelationCreateArgs} args - Arguments to create a ProcessBlockRelation.
     * @example
     * // Create one ProcessBlockRelation
     * const ProcessBlockRelation = await prisma.processBlockRelation.create({
     *   data: {
     *     // ... data to create a ProcessBlockRelation
     *   }
     * })
     * 
     */
    create<T extends ProcessBlockRelationCreateArgs>(args: SelectSubset<T, ProcessBlockRelationCreateArgs<ExtArgs>>): Prisma__ProcessBlockRelationClient<$Result.GetResult<Prisma.$ProcessBlockRelationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProcessBlockRelations.
     * @param {ProcessBlockRelationCreateManyArgs} args - Arguments to create many ProcessBlockRelations.
     * @example
     * // Create many ProcessBlockRelations
     * const processBlockRelation = await prisma.processBlockRelation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProcessBlockRelationCreateManyArgs>(args?: SelectSubset<T, ProcessBlockRelationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProcessBlockRelations and returns the data saved in the database.
     * @param {ProcessBlockRelationCreateManyAndReturnArgs} args - Arguments to create many ProcessBlockRelations.
     * @example
     * // Create many ProcessBlockRelations
     * const processBlockRelation = await prisma.processBlockRelation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProcessBlockRelations and only return the `id`
     * const processBlockRelationWithIdOnly = await prisma.processBlockRelation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProcessBlockRelationCreateManyAndReturnArgs>(args?: SelectSubset<T, ProcessBlockRelationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessBlockRelationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProcessBlockRelation.
     * @param {ProcessBlockRelationDeleteArgs} args - Arguments to delete one ProcessBlockRelation.
     * @example
     * // Delete one ProcessBlockRelation
     * const ProcessBlockRelation = await prisma.processBlockRelation.delete({
     *   where: {
     *     // ... filter to delete one ProcessBlockRelation
     *   }
     * })
     * 
     */
    delete<T extends ProcessBlockRelationDeleteArgs>(args: SelectSubset<T, ProcessBlockRelationDeleteArgs<ExtArgs>>): Prisma__ProcessBlockRelationClient<$Result.GetResult<Prisma.$ProcessBlockRelationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProcessBlockRelation.
     * @param {ProcessBlockRelationUpdateArgs} args - Arguments to update one ProcessBlockRelation.
     * @example
     * // Update one ProcessBlockRelation
     * const processBlockRelation = await prisma.processBlockRelation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProcessBlockRelationUpdateArgs>(args: SelectSubset<T, ProcessBlockRelationUpdateArgs<ExtArgs>>): Prisma__ProcessBlockRelationClient<$Result.GetResult<Prisma.$ProcessBlockRelationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProcessBlockRelations.
     * @param {ProcessBlockRelationDeleteManyArgs} args - Arguments to filter ProcessBlockRelations to delete.
     * @example
     * // Delete a few ProcessBlockRelations
     * const { count } = await prisma.processBlockRelation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProcessBlockRelationDeleteManyArgs>(args?: SelectSubset<T, ProcessBlockRelationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProcessBlockRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessBlockRelationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProcessBlockRelations
     * const processBlockRelation = await prisma.processBlockRelation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProcessBlockRelationUpdateManyArgs>(args: SelectSubset<T, ProcessBlockRelationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProcessBlockRelation.
     * @param {ProcessBlockRelationUpsertArgs} args - Arguments to update or create a ProcessBlockRelation.
     * @example
     * // Update or create a ProcessBlockRelation
     * const processBlockRelation = await prisma.processBlockRelation.upsert({
     *   create: {
     *     // ... data to create a ProcessBlockRelation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProcessBlockRelation we want to update
     *   }
     * })
     */
    upsert<T extends ProcessBlockRelationUpsertArgs>(args: SelectSubset<T, ProcessBlockRelationUpsertArgs<ExtArgs>>): Prisma__ProcessBlockRelationClient<$Result.GetResult<Prisma.$ProcessBlockRelationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProcessBlockRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessBlockRelationCountArgs} args - Arguments to filter ProcessBlockRelations to count.
     * @example
     * // Count the number of ProcessBlockRelations
     * const count = await prisma.processBlockRelation.count({
     *   where: {
     *     // ... the filter for the ProcessBlockRelations we want to count
     *   }
     * })
    **/
    count<T extends ProcessBlockRelationCountArgs>(
      args?: Subset<T, ProcessBlockRelationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcessBlockRelationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProcessBlockRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessBlockRelationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcessBlockRelationAggregateArgs>(args: Subset<T, ProcessBlockRelationAggregateArgs>): Prisma.PrismaPromise<GetProcessBlockRelationAggregateType<T>>

    /**
     * Group by ProcessBlockRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessBlockRelationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProcessBlockRelationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProcessBlockRelationGroupByArgs['orderBy'] }
        : { orderBy?: ProcessBlockRelationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProcessBlockRelationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessBlockRelationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProcessBlockRelation model
   */
  readonly fields: ProcessBlockRelationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProcessBlockRelation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProcessBlockRelationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    output<T extends ProcessBlockDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProcessBlockDefaultArgs<ExtArgs>>): Prisma__ProcessBlockClient<$Result.GetResult<Prisma.$ProcessBlockPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    input<T extends ProcessBlockDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProcessBlockDefaultArgs<ExtArgs>>): Prisma__ProcessBlockClient<$Result.GetResult<Prisma.$ProcessBlockPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProcessBlockRelation model
   */ 
  interface ProcessBlockRelationFieldRefs {
    readonly id: FieldRef<"ProcessBlockRelation", 'String'>
    readonly outputId: FieldRef<"ProcessBlockRelation", 'String'>
    readonly outputPort: FieldRef<"ProcessBlockRelation", 'String'>
    readonly inputId: FieldRef<"ProcessBlockRelation", 'String'>
    readonly inputPort: FieldRef<"ProcessBlockRelation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProcessBlockRelation findUnique
   */
  export type ProcessBlockRelationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlockRelation
     */
    select?: ProcessBlockRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockRelationInclude<ExtArgs> | null
    /**
     * Filter, which ProcessBlockRelation to fetch.
     */
    where: ProcessBlockRelationWhereUniqueInput
  }

  /**
   * ProcessBlockRelation findUniqueOrThrow
   */
  export type ProcessBlockRelationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlockRelation
     */
    select?: ProcessBlockRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockRelationInclude<ExtArgs> | null
    /**
     * Filter, which ProcessBlockRelation to fetch.
     */
    where: ProcessBlockRelationWhereUniqueInput
  }

  /**
   * ProcessBlockRelation findFirst
   */
  export type ProcessBlockRelationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlockRelation
     */
    select?: ProcessBlockRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockRelationInclude<ExtArgs> | null
    /**
     * Filter, which ProcessBlockRelation to fetch.
     */
    where?: ProcessBlockRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessBlockRelations to fetch.
     */
    orderBy?: ProcessBlockRelationOrderByWithRelationInput | ProcessBlockRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProcessBlockRelations.
     */
    cursor?: ProcessBlockRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessBlockRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessBlockRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProcessBlockRelations.
     */
    distinct?: ProcessBlockRelationScalarFieldEnum | ProcessBlockRelationScalarFieldEnum[]
  }

  /**
   * ProcessBlockRelation findFirstOrThrow
   */
  export type ProcessBlockRelationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlockRelation
     */
    select?: ProcessBlockRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockRelationInclude<ExtArgs> | null
    /**
     * Filter, which ProcessBlockRelation to fetch.
     */
    where?: ProcessBlockRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessBlockRelations to fetch.
     */
    orderBy?: ProcessBlockRelationOrderByWithRelationInput | ProcessBlockRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProcessBlockRelations.
     */
    cursor?: ProcessBlockRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessBlockRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessBlockRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProcessBlockRelations.
     */
    distinct?: ProcessBlockRelationScalarFieldEnum | ProcessBlockRelationScalarFieldEnum[]
  }

  /**
   * ProcessBlockRelation findMany
   */
  export type ProcessBlockRelationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlockRelation
     */
    select?: ProcessBlockRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockRelationInclude<ExtArgs> | null
    /**
     * Filter, which ProcessBlockRelations to fetch.
     */
    where?: ProcessBlockRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessBlockRelations to fetch.
     */
    orderBy?: ProcessBlockRelationOrderByWithRelationInput | ProcessBlockRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProcessBlockRelations.
     */
    cursor?: ProcessBlockRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessBlockRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessBlockRelations.
     */
    skip?: number
    distinct?: ProcessBlockRelationScalarFieldEnum | ProcessBlockRelationScalarFieldEnum[]
  }

  /**
   * ProcessBlockRelation create
   */
  export type ProcessBlockRelationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlockRelation
     */
    select?: ProcessBlockRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockRelationInclude<ExtArgs> | null
    /**
     * The data needed to create a ProcessBlockRelation.
     */
    data: XOR<ProcessBlockRelationCreateInput, ProcessBlockRelationUncheckedCreateInput>
  }

  /**
   * ProcessBlockRelation createMany
   */
  export type ProcessBlockRelationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProcessBlockRelations.
     */
    data: ProcessBlockRelationCreateManyInput | ProcessBlockRelationCreateManyInput[]
  }

  /**
   * ProcessBlockRelation createManyAndReturn
   */
  export type ProcessBlockRelationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlockRelation
     */
    select?: ProcessBlockRelationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProcessBlockRelations.
     */
    data: ProcessBlockRelationCreateManyInput | ProcessBlockRelationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockRelationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProcessBlockRelation update
   */
  export type ProcessBlockRelationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlockRelation
     */
    select?: ProcessBlockRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockRelationInclude<ExtArgs> | null
    /**
     * The data needed to update a ProcessBlockRelation.
     */
    data: XOR<ProcessBlockRelationUpdateInput, ProcessBlockRelationUncheckedUpdateInput>
    /**
     * Choose, which ProcessBlockRelation to update.
     */
    where: ProcessBlockRelationWhereUniqueInput
  }

  /**
   * ProcessBlockRelation updateMany
   */
  export type ProcessBlockRelationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProcessBlockRelations.
     */
    data: XOR<ProcessBlockRelationUpdateManyMutationInput, ProcessBlockRelationUncheckedUpdateManyInput>
    /**
     * Filter which ProcessBlockRelations to update
     */
    where?: ProcessBlockRelationWhereInput
  }

  /**
   * ProcessBlockRelation upsert
   */
  export type ProcessBlockRelationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlockRelation
     */
    select?: ProcessBlockRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockRelationInclude<ExtArgs> | null
    /**
     * The filter to search for the ProcessBlockRelation to update in case it exists.
     */
    where: ProcessBlockRelationWhereUniqueInput
    /**
     * In case the ProcessBlockRelation found by the `where` argument doesn't exist, create a new ProcessBlockRelation with this data.
     */
    create: XOR<ProcessBlockRelationCreateInput, ProcessBlockRelationUncheckedCreateInput>
    /**
     * In case the ProcessBlockRelation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProcessBlockRelationUpdateInput, ProcessBlockRelationUncheckedUpdateInput>
  }

  /**
   * ProcessBlockRelation delete
   */
  export type ProcessBlockRelationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlockRelation
     */
    select?: ProcessBlockRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockRelationInclude<ExtArgs> | null
    /**
     * Filter which ProcessBlockRelation to delete.
     */
    where: ProcessBlockRelationWhereUniqueInput
  }

  /**
   * ProcessBlockRelation deleteMany
   */
  export type ProcessBlockRelationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProcessBlockRelations to delete
     */
    where?: ProcessBlockRelationWhereInput
  }

  /**
   * ProcessBlockRelation without action
   */
  export type ProcessBlockRelationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessBlockRelation
     */
    select?: ProcessBlockRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessBlockRelationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProcessScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ProcessScalarFieldEnum = (typeof ProcessScalarFieldEnum)[keyof typeof ProcessScalarFieldEnum]


  export const ProcessBlockScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    data: 'data',
    x: 'x',
    y: 'y',
    processId: 'processId'
  };

  export type ProcessBlockScalarFieldEnum = (typeof ProcessBlockScalarFieldEnum)[keyof typeof ProcessBlockScalarFieldEnum]


  export const ProcessBlockRelationScalarFieldEnum: {
    id: 'id',
    outputId: 'outputId',
    outputPort: 'outputPort',
    inputId: 'inputId',
    inputPort: 'inputPort'
  };

  export type ProcessBlockRelationScalarFieldEnum = (typeof ProcessBlockRelationScalarFieldEnum)[keyof typeof ProcessBlockRelationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type ProcessWhereInput = {
    AND?: ProcessWhereInput | ProcessWhereInput[]
    OR?: ProcessWhereInput[]
    NOT?: ProcessWhereInput | ProcessWhereInput[]
    id?: StringFilter<"Process"> | string
    name?: StringFilter<"Process"> | string
    blocks?: ProcessBlockListRelationFilter
  }

  export type ProcessOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    blocks?: ProcessBlockOrderByRelationAggregateInput
  }

  export type ProcessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProcessWhereInput | ProcessWhereInput[]
    OR?: ProcessWhereInput[]
    NOT?: ProcessWhereInput | ProcessWhereInput[]
    name?: StringFilter<"Process"> | string
    blocks?: ProcessBlockListRelationFilter
  }, "id">

  export type ProcessOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ProcessCountOrderByAggregateInput
    _max?: ProcessMaxOrderByAggregateInput
    _min?: ProcessMinOrderByAggregateInput
  }

  export type ProcessScalarWhereWithAggregatesInput = {
    AND?: ProcessScalarWhereWithAggregatesInput | ProcessScalarWhereWithAggregatesInput[]
    OR?: ProcessScalarWhereWithAggregatesInput[]
    NOT?: ProcessScalarWhereWithAggregatesInput | ProcessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Process"> | string
    name?: StringWithAggregatesFilter<"Process"> | string
  }

  export type ProcessBlockWhereInput = {
    AND?: ProcessBlockWhereInput | ProcessBlockWhereInput[]
    OR?: ProcessBlockWhereInput[]
    NOT?: ProcessBlockWhereInput | ProcessBlockWhereInput[]
    id?: StringFilter<"ProcessBlock"> | string
    name?: StringFilter<"ProcessBlock"> | string
    type?: StringFilter<"ProcessBlock"> | string
    data?: StringFilter<"ProcessBlock"> | string
    x?: FloatFilter<"ProcessBlock"> | number
    y?: FloatFilter<"ProcessBlock"> | number
    processId?: StringFilter<"ProcessBlock"> | string
    process?: XOR<ProcessRelationFilter, ProcessWhereInput>
    outputs?: ProcessBlockRelationListRelationFilter
    inputs?: ProcessBlockRelationListRelationFilter
  }

  export type ProcessBlockOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    data?: SortOrder
    x?: SortOrder
    y?: SortOrder
    processId?: SortOrder
    process?: ProcessOrderByWithRelationInput
    outputs?: ProcessBlockRelationOrderByRelationAggregateInput
    inputs?: ProcessBlockRelationOrderByRelationAggregateInput
  }

  export type ProcessBlockWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProcessBlockWhereInput | ProcessBlockWhereInput[]
    OR?: ProcessBlockWhereInput[]
    NOT?: ProcessBlockWhereInput | ProcessBlockWhereInput[]
    name?: StringFilter<"ProcessBlock"> | string
    type?: StringFilter<"ProcessBlock"> | string
    data?: StringFilter<"ProcessBlock"> | string
    x?: FloatFilter<"ProcessBlock"> | number
    y?: FloatFilter<"ProcessBlock"> | number
    processId?: StringFilter<"ProcessBlock"> | string
    process?: XOR<ProcessRelationFilter, ProcessWhereInput>
    outputs?: ProcessBlockRelationListRelationFilter
    inputs?: ProcessBlockRelationListRelationFilter
  }, "id">

  export type ProcessBlockOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    data?: SortOrder
    x?: SortOrder
    y?: SortOrder
    processId?: SortOrder
    _count?: ProcessBlockCountOrderByAggregateInput
    _avg?: ProcessBlockAvgOrderByAggregateInput
    _max?: ProcessBlockMaxOrderByAggregateInput
    _min?: ProcessBlockMinOrderByAggregateInput
    _sum?: ProcessBlockSumOrderByAggregateInput
  }

  export type ProcessBlockScalarWhereWithAggregatesInput = {
    AND?: ProcessBlockScalarWhereWithAggregatesInput | ProcessBlockScalarWhereWithAggregatesInput[]
    OR?: ProcessBlockScalarWhereWithAggregatesInput[]
    NOT?: ProcessBlockScalarWhereWithAggregatesInput | ProcessBlockScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProcessBlock"> | string
    name?: StringWithAggregatesFilter<"ProcessBlock"> | string
    type?: StringWithAggregatesFilter<"ProcessBlock"> | string
    data?: StringWithAggregatesFilter<"ProcessBlock"> | string
    x?: FloatWithAggregatesFilter<"ProcessBlock"> | number
    y?: FloatWithAggregatesFilter<"ProcessBlock"> | number
    processId?: StringWithAggregatesFilter<"ProcessBlock"> | string
  }

  export type ProcessBlockRelationWhereInput = {
    AND?: ProcessBlockRelationWhereInput | ProcessBlockRelationWhereInput[]
    OR?: ProcessBlockRelationWhereInput[]
    NOT?: ProcessBlockRelationWhereInput | ProcessBlockRelationWhereInput[]
    id?: StringFilter<"ProcessBlockRelation"> | string
    outputId?: StringFilter<"ProcessBlockRelation"> | string
    outputPort?: StringFilter<"ProcessBlockRelation"> | string
    inputId?: StringFilter<"ProcessBlockRelation"> | string
    inputPort?: StringFilter<"ProcessBlockRelation"> | string
    output?: XOR<ProcessBlockRelationFilter, ProcessBlockWhereInput>
    input?: XOR<ProcessBlockRelationFilter, ProcessBlockWhereInput>
  }

  export type ProcessBlockRelationOrderByWithRelationInput = {
    id?: SortOrder
    outputId?: SortOrder
    outputPort?: SortOrder
    inputId?: SortOrder
    inputPort?: SortOrder
    output?: ProcessBlockOrderByWithRelationInput
    input?: ProcessBlockOrderByWithRelationInput
  }

  export type ProcessBlockRelationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProcessBlockRelationWhereInput | ProcessBlockRelationWhereInput[]
    OR?: ProcessBlockRelationWhereInput[]
    NOT?: ProcessBlockRelationWhereInput | ProcessBlockRelationWhereInput[]
    outputId?: StringFilter<"ProcessBlockRelation"> | string
    outputPort?: StringFilter<"ProcessBlockRelation"> | string
    inputId?: StringFilter<"ProcessBlockRelation"> | string
    inputPort?: StringFilter<"ProcessBlockRelation"> | string
    output?: XOR<ProcessBlockRelationFilter, ProcessBlockWhereInput>
    input?: XOR<ProcessBlockRelationFilter, ProcessBlockWhereInput>
  }, "id">

  export type ProcessBlockRelationOrderByWithAggregationInput = {
    id?: SortOrder
    outputId?: SortOrder
    outputPort?: SortOrder
    inputId?: SortOrder
    inputPort?: SortOrder
    _count?: ProcessBlockRelationCountOrderByAggregateInput
    _max?: ProcessBlockRelationMaxOrderByAggregateInput
    _min?: ProcessBlockRelationMinOrderByAggregateInput
  }

  export type ProcessBlockRelationScalarWhereWithAggregatesInput = {
    AND?: ProcessBlockRelationScalarWhereWithAggregatesInput | ProcessBlockRelationScalarWhereWithAggregatesInput[]
    OR?: ProcessBlockRelationScalarWhereWithAggregatesInput[]
    NOT?: ProcessBlockRelationScalarWhereWithAggregatesInput | ProcessBlockRelationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProcessBlockRelation"> | string
    outputId?: StringWithAggregatesFilter<"ProcessBlockRelation"> | string
    outputPort?: StringWithAggregatesFilter<"ProcessBlockRelation"> | string
    inputId?: StringWithAggregatesFilter<"ProcessBlockRelation"> | string
    inputPort?: StringWithAggregatesFilter<"ProcessBlockRelation"> | string
  }

  export type ProcessCreateInput = {
    id?: string
    name: string
    blocks?: ProcessBlockCreateNestedManyWithoutProcessInput
  }

  export type ProcessUncheckedCreateInput = {
    id?: string
    name: string
    blocks?: ProcessBlockUncheckedCreateNestedManyWithoutProcessInput
  }

  export type ProcessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    blocks?: ProcessBlockUpdateManyWithoutProcessNestedInput
  }

  export type ProcessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    blocks?: ProcessBlockUncheckedUpdateManyWithoutProcessNestedInput
  }

  export type ProcessCreateManyInput = {
    id?: string
    name: string
  }

  export type ProcessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessBlockCreateInput = {
    id?: string
    name: string
    type: string
    data: string
    x?: number
    y?: number
    process: ProcessCreateNestedOneWithoutBlocksInput
    outputs?: ProcessBlockRelationCreateNestedManyWithoutOutputInput
    inputs?: ProcessBlockRelationCreateNestedManyWithoutInputInput
  }

  export type ProcessBlockUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    data: string
    x?: number
    y?: number
    processId: string
    outputs?: ProcessBlockRelationUncheckedCreateNestedManyWithoutOutputInput
    inputs?: ProcessBlockRelationUncheckedCreateNestedManyWithoutInputInput
  }

  export type ProcessBlockUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    process?: ProcessUpdateOneRequiredWithoutBlocksNestedInput
    outputs?: ProcessBlockRelationUpdateManyWithoutOutputNestedInput
    inputs?: ProcessBlockRelationUpdateManyWithoutInputNestedInput
  }

  export type ProcessBlockUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    processId?: StringFieldUpdateOperationsInput | string
    outputs?: ProcessBlockRelationUncheckedUpdateManyWithoutOutputNestedInput
    inputs?: ProcessBlockRelationUncheckedUpdateManyWithoutInputNestedInput
  }

  export type ProcessBlockCreateManyInput = {
    id?: string
    name: string
    type: string
    data: string
    x?: number
    y?: number
    processId: string
  }

  export type ProcessBlockUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
  }

  export type ProcessBlockUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    processId?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessBlockRelationCreateInput = {
    id?: string
    outputPort: string
    inputPort: string
    output: ProcessBlockCreateNestedOneWithoutOutputsInput
    input: ProcessBlockCreateNestedOneWithoutInputsInput
  }

  export type ProcessBlockRelationUncheckedCreateInput = {
    id?: string
    outputId: string
    outputPort: string
    inputId: string
    inputPort: string
  }

  export type ProcessBlockRelationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    outputPort?: StringFieldUpdateOperationsInput | string
    inputPort?: StringFieldUpdateOperationsInput | string
    output?: ProcessBlockUpdateOneRequiredWithoutOutputsNestedInput
    input?: ProcessBlockUpdateOneRequiredWithoutInputsNestedInput
  }

  export type ProcessBlockRelationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    outputId?: StringFieldUpdateOperationsInput | string
    outputPort?: StringFieldUpdateOperationsInput | string
    inputId?: StringFieldUpdateOperationsInput | string
    inputPort?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessBlockRelationCreateManyInput = {
    id?: string
    outputId: string
    outputPort: string
    inputId: string
    inputPort: string
  }

  export type ProcessBlockRelationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    outputPort?: StringFieldUpdateOperationsInput | string
    inputPort?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessBlockRelationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    outputId?: StringFieldUpdateOperationsInput | string
    outputPort?: StringFieldUpdateOperationsInput | string
    inputId?: StringFieldUpdateOperationsInput | string
    inputPort?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ProcessBlockListRelationFilter = {
    every?: ProcessBlockWhereInput
    some?: ProcessBlockWhereInput
    none?: ProcessBlockWhereInput
  }

  export type ProcessBlockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProcessCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ProcessMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ProcessMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ProcessRelationFilter = {
    is?: ProcessWhereInput
    isNot?: ProcessWhereInput
  }

  export type ProcessBlockRelationListRelationFilter = {
    every?: ProcessBlockRelationWhereInput
    some?: ProcessBlockRelationWhereInput
    none?: ProcessBlockRelationWhereInput
  }

  export type ProcessBlockRelationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProcessBlockCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    data?: SortOrder
    x?: SortOrder
    y?: SortOrder
    processId?: SortOrder
  }

  export type ProcessBlockAvgOrderByAggregateInput = {
    x?: SortOrder
    y?: SortOrder
  }

  export type ProcessBlockMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    data?: SortOrder
    x?: SortOrder
    y?: SortOrder
    processId?: SortOrder
  }

  export type ProcessBlockMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    data?: SortOrder
    x?: SortOrder
    y?: SortOrder
    processId?: SortOrder
  }

  export type ProcessBlockSumOrderByAggregateInput = {
    x?: SortOrder
    y?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ProcessBlockRelationFilter = {
    is?: ProcessBlockWhereInput
    isNot?: ProcessBlockWhereInput
  }

  export type ProcessBlockRelationCountOrderByAggregateInput = {
    id?: SortOrder
    outputId?: SortOrder
    outputPort?: SortOrder
    inputId?: SortOrder
    inputPort?: SortOrder
  }

  export type ProcessBlockRelationMaxOrderByAggregateInput = {
    id?: SortOrder
    outputId?: SortOrder
    outputPort?: SortOrder
    inputId?: SortOrder
    inputPort?: SortOrder
  }

  export type ProcessBlockRelationMinOrderByAggregateInput = {
    id?: SortOrder
    outputId?: SortOrder
    outputPort?: SortOrder
    inputId?: SortOrder
    inputPort?: SortOrder
  }

  export type ProcessBlockCreateNestedManyWithoutProcessInput = {
    create?: XOR<ProcessBlockCreateWithoutProcessInput, ProcessBlockUncheckedCreateWithoutProcessInput> | ProcessBlockCreateWithoutProcessInput[] | ProcessBlockUncheckedCreateWithoutProcessInput[]
    connectOrCreate?: ProcessBlockCreateOrConnectWithoutProcessInput | ProcessBlockCreateOrConnectWithoutProcessInput[]
    createMany?: ProcessBlockCreateManyProcessInputEnvelope
    connect?: ProcessBlockWhereUniqueInput | ProcessBlockWhereUniqueInput[]
  }

  export type ProcessBlockUncheckedCreateNestedManyWithoutProcessInput = {
    create?: XOR<ProcessBlockCreateWithoutProcessInput, ProcessBlockUncheckedCreateWithoutProcessInput> | ProcessBlockCreateWithoutProcessInput[] | ProcessBlockUncheckedCreateWithoutProcessInput[]
    connectOrCreate?: ProcessBlockCreateOrConnectWithoutProcessInput | ProcessBlockCreateOrConnectWithoutProcessInput[]
    createMany?: ProcessBlockCreateManyProcessInputEnvelope
    connect?: ProcessBlockWhereUniqueInput | ProcessBlockWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ProcessBlockUpdateManyWithoutProcessNestedInput = {
    create?: XOR<ProcessBlockCreateWithoutProcessInput, ProcessBlockUncheckedCreateWithoutProcessInput> | ProcessBlockCreateWithoutProcessInput[] | ProcessBlockUncheckedCreateWithoutProcessInput[]
    connectOrCreate?: ProcessBlockCreateOrConnectWithoutProcessInput | ProcessBlockCreateOrConnectWithoutProcessInput[]
    upsert?: ProcessBlockUpsertWithWhereUniqueWithoutProcessInput | ProcessBlockUpsertWithWhereUniqueWithoutProcessInput[]
    createMany?: ProcessBlockCreateManyProcessInputEnvelope
    set?: ProcessBlockWhereUniqueInput | ProcessBlockWhereUniqueInput[]
    disconnect?: ProcessBlockWhereUniqueInput | ProcessBlockWhereUniqueInput[]
    delete?: ProcessBlockWhereUniqueInput | ProcessBlockWhereUniqueInput[]
    connect?: ProcessBlockWhereUniqueInput | ProcessBlockWhereUniqueInput[]
    update?: ProcessBlockUpdateWithWhereUniqueWithoutProcessInput | ProcessBlockUpdateWithWhereUniqueWithoutProcessInput[]
    updateMany?: ProcessBlockUpdateManyWithWhereWithoutProcessInput | ProcessBlockUpdateManyWithWhereWithoutProcessInput[]
    deleteMany?: ProcessBlockScalarWhereInput | ProcessBlockScalarWhereInput[]
  }

  export type ProcessBlockUncheckedUpdateManyWithoutProcessNestedInput = {
    create?: XOR<ProcessBlockCreateWithoutProcessInput, ProcessBlockUncheckedCreateWithoutProcessInput> | ProcessBlockCreateWithoutProcessInput[] | ProcessBlockUncheckedCreateWithoutProcessInput[]
    connectOrCreate?: ProcessBlockCreateOrConnectWithoutProcessInput | ProcessBlockCreateOrConnectWithoutProcessInput[]
    upsert?: ProcessBlockUpsertWithWhereUniqueWithoutProcessInput | ProcessBlockUpsertWithWhereUniqueWithoutProcessInput[]
    createMany?: ProcessBlockCreateManyProcessInputEnvelope
    set?: ProcessBlockWhereUniqueInput | ProcessBlockWhereUniqueInput[]
    disconnect?: ProcessBlockWhereUniqueInput | ProcessBlockWhereUniqueInput[]
    delete?: ProcessBlockWhereUniqueInput | ProcessBlockWhereUniqueInput[]
    connect?: ProcessBlockWhereUniqueInput | ProcessBlockWhereUniqueInput[]
    update?: ProcessBlockUpdateWithWhereUniqueWithoutProcessInput | ProcessBlockUpdateWithWhereUniqueWithoutProcessInput[]
    updateMany?: ProcessBlockUpdateManyWithWhereWithoutProcessInput | ProcessBlockUpdateManyWithWhereWithoutProcessInput[]
    deleteMany?: ProcessBlockScalarWhereInput | ProcessBlockScalarWhereInput[]
  }

  export type ProcessCreateNestedOneWithoutBlocksInput = {
    create?: XOR<ProcessCreateWithoutBlocksInput, ProcessUncheckedCreateWithoutBlocksInput>
    connectOrCreate?: ProcessCreateOrConnectWithoutBlocksInput
    connect?: ProcessWhereUniqueInput
  }

  export type ProcessBlockRelationCreateNestedManyWithoutOutputInput = {
    create?: XOR<ProcessBlockRelationCreateWithoutOutputInput, ProcessBlockRelationUncheckedCreateWithoutOutputInput> | ProcessBlockRelationCreateWithoutOutputInput[] | ProcessBlockRelationUncheckedCreateWithoutOutputInput[]
    connectOrCreate?: ProcessBlockRelationCreateOrConnectWithoutOutputInput | ProcessBlockRelationCreateOrConnectWithoutOutputInput[]
    createMany?: ProcessBlockRelationCreateManyOutputInputEnvelope
    connect?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
  }

  export type ProcessBlockRelationCreateNestedManyWithoutInputInput = {
    create?: XOR<ProcessBlockRelationCreateWithoutInputInput, ProcessBlockRelationUncheckedCreateWithoutInputInput> | ProcessBlockRelationCreateWithoutInputInput[] | ProcessBlockRelationUncheckedCreateWithoutInputInput[]
    connectOrCreate?: ProcessBlockRelationCreateOrConnectWithoutInputInput | ProcessBlockRelationCreateOrConnectWithoutInputInput[]
    createMany?: ProcessBlockRelationCreateManyInputInputEnvelope
    connect?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
  }

  export type ProcessBlockRelationUncheckedCreateNestedManyWithoutOutputInput = {
    create?: XOR<ProcessBlockRelationCreateWithoutOutputInput, ProcessBlockRelationUncheckedCreateWithoutOutputInput> | ProcessBlockRelationCreateWithoutOutputInput[] | ProcessBlockRelationUncheckedCreateWithoutOutputInput[]
    connectOrCreate?: ProcessBlockRelationCreateOrConnectWithoutOutputInput | ProcessBlockRelationCreateOrConnectWithoutOutputInput[]
    createMany?: ProcessBlockRelationCreateManyOutputInputEnvelope
    connect?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
  }

  export type ProcessBlockRelationUncheckedCreateNestedManyWithoutInputInput = {
    create?: XOR<ProcessBlockRelationCreateWithoutInputInput, ProcessBlockRelationUncheckedCreateWithoutInputInput> | ProcessBlockRelationCreateWithoutInputInput[] | ProcessBlockRelationUncheckedCreateWithoutInputInput[]
    connectOrCreate?: ProcessBlockRelationCreateOrConnectWithoutInputInput | ProcessBlockRelationCreateOrConnectWithoutInputInput[]
    createMany?: ProcessBlockRelationCreateManyInputInputEnvelope
    connect?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProcessUpdateOneRequiredWithoutBlocksNestedInput = {
    create?: XOR<ProcessCreateWithoutBlocksInput, ProcessUncheckedCreateWithoutBlocksInput>
    connectOrCreate?: ProcessCreateOrConnectWithoutBlocksInput
    upsert?: ProcessUpsertWithoutBlocksInput
    connect?: ProcessWhereUniqueInput
    update?: XOR<XOR<ProcessUpdateToOneWithWhereWithoutBlocksInput, ProcessUpdateWithoutBlocksInput>, ProcessUncheckedUpdateWithoutBlocksInput>
  }

  export type ProcessBlockRelationUpdateManyWithoutOutputNestedInput = {
    create?: XOR<ProcessBlockRelationCreateWithoutOutputInput, ProcessBlockRelationUncheckedCreateWithoutOutputInput> | ProcessBlockRelationCreateWithoutOutputInput[] | ProcessBlockRelationUncheckedCreateWithoutOutputInput[]
    connectOrCreate?: ProcessBlockRelationCreateOrConnectWithoutOutputInput | ProcessBlockRelationCreateOrConnectWithoutOutputInput[]
    upsert?: ProcessBlockRelationUpsertWithWhereUniqueWithoutOutputInput | ProcessBlockRelationUpsertWithWhereUniqueWithoutOutputInput[]
    createMany?: ProcessBlockRelationCreateManyOutputInputEnvelope
    set?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    disconnect?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    delete?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    connect?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    update?: ProcessBlockRelationUpdateWithWhereUniqueWithoutOutputInput | ProcessBlockRelationUpdateWithWhereUniqueWithoutOutputInput[]
    updateMany?: ProcessBlockRelationUpdateManyWithWhereWithoutOutputInput | ProcessBlockRelationUpdateManyWithWhereWithoutOutputInput[]
    deleteMany?: ProcessBlockRelationScalarWhereInput | ProcessBlockRelationScalarWhereInput[]
  }

  export type ProcessBlockRelationUpdateManyWithoutInputNestedInput = {
    create?: XOR<ProcessBlockRelationCreateWithoutInputInput, ProcessBlockRelationUncheckedCreateWithoutInputInput> | ProcessBlockRelationCreateWithoutInputInput[] | ProcessBlockRelationUncheckedCreateWithoutInputInput[]
    connectOrCreate?: ProcessBlockRelationCreateOrConnectWithoutInputInput | ProcessBlockRelationCreateOrConnectWithoutInputInput[]
    upsert?: ProcessBlockRelationUpsertWithWhereUniqueWithoutInputInput | ProcessBlockRelationUpsertWithWhereUniqueWithoutInputInput[]
    createMany?: ProcessBlockRelationCreateManyInputInputEnvelope
    set?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    disconnect?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    delete?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    connect?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    update?: ProcessBlockRelationUpdateWithWhereUniqueWithoutInputInput | ProcessBlockRelationUpdateWithWhereUniqueWithoutInputInput[]
    updateMany?: ProcessBlockRelationUpdateManyWithWhereWithoutInputInput | ProcessBlockRelationUpdateManyWithWhereWithoutInputInput[]
    deleteMany?: ProcessBlockRelationScalarWhereInput | ProcessBlockRelationScalarWhereInput[]
  }

  export type ProcessBlockRelationUncheckedUpdateManyWithoutOutputNestedInput = {
    create?: XOR<ProcessBlockRelationCreateWithoutOutputInput, ProcessBlockRelationUncheckedCreateWithoutOutputInput> | ProcessBlockRelationCreateWithoutOutputInput[] | ProcessBlockRelationUncheckedCreateWithoutOutputInput[]
    connectOrCreate?: ProcessBlockRelationCreateOrConnectWithoutOutputInput | ProcessBlockRelationCreateOrConnectWithoutOutputInput[]
    upsert?: ProcessBlockRelationUpsertWithWhereUniqueWithoutOutputInput | ProcessBlockRelationUpsertWithWhereUniqueWithoutOutputInput[]
    createMany?: ProcessBlockRelationCreateManyOutputInputEnvelope
    set?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    disconnect?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    delete?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    connect?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    update?: ProcessBlockRelationUpdateWithWhereUniqueWithoutOutputInput | ProcessBlockRelationUpdateWithWhereUniqueWithoutOutputInput[]
    updateMany?: ProcessBlockRelationUpdateManyWithWhereWithoutOutputInput | ProcessBlockRelationUpdateManyWithWhereWithoutOutputInput[]
    deleteMany?: ProcessBlockRelationScalarWhereInput | ProcessBlockRelationScalarWhereInput[]
  }

  export type ProcessBlockRelationUncheckedUpdateManyWithoutInputNestedInput = {
    create?: XOR<ProcessBlockRelationCreateWithoutInputInput, ProcessBlockRelationUncheckedCreateWithoutInputInput> | ProcessBlockRelationCreateWithoutInputInput[] | ProcessBlockRelationUncheckedCreateWithoutInputInput[]
    connectOrCreate?: ProcessBlockRelationCreateOrConnectWithoutInputInput | ProcessBlockRelationCreateOrConnectWithoutInputInput[]
    upsert?: ProcessBlockRelationUpsertWithWhereUniqueWithoutInputInput | ProcessBlockRelationUpsertWithWhereUniqueWithoutInputInput[]
    createMany?: ProcessBlockRelationCreateManyInputInputEnvelope
    set?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    disconnect?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    delete?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    connect?: ProcessBlockRelationWhereUniqueInput | ProcessBlockRelationWhereUniqueInput[]
    update?: ProcessBlockRelationUpdateWithWhereUniqueWithoutInputInput | ProcessBlockRelationUpdateWithWhereUniqueWithoutInputInput[]
    updateMany?: ProcessBlockRelationUpdateManyWithWhereWithoutInputInput | ProcessBlockRelationUpdateManyWithWhereWithoutInputInput[]
    deleteMany?: ProcessBlockRelationScalarWhereInput | ProcessBlockRelationScalarWhereInput[]
  }

  export type ProcessBlockCreateNestedOneWithoutOutputsInput = {
    create?: XOR<ProcessBlockCreateWithoutOutputsInput, ProcessBlockUncheckedCreateWithoutOutputsInput>
    connectOrCreate?: ProcessBlockCreateOrConnectWithoutOutputsInput
    connect?: ProcessBlockWhereUniqueInput
  }

  export type ProcessBlockCreateNestedOneWithoutInputsInput = {
    create?: XOR<ProcessBlockCreateWithoutInputsInput, ProcessBlockUncheckedCreateWithoutInputsInput>
    connectOrCreate?: ProcessBlockCreateOrConnectWithoutInputsInput
    connect?: ProcessBlockWhereUniqueInput
  }

  export type ProcessBlockUpdateOneRequiredWithoutOutputsNestedInput = {
    create?: XOR<ProcessBlockCreateWithoutOutputsInput, ProcessBlockUncheckedCreateWithoutOutputsInput>
    connectOrCreate?: ProcessBlockCreateOrConnectWithoutOutputsInput
    upsert?: ProcessBlockUpsertWithoutOutputsInput
    connect?: ProcessBlockWhereUniqueInput
    update?: XOR<XOR<ProcessBlockUpdateToOneWithWhereWithoutOutputsInput, ProcessBlockUpdateWithoutOutputsInput>, ProcessBlockUncheckedUpdateWithoutOutputsInput>
  }

  export type ProcessBlockUpdateOneRequiredWithoutInputsNestedInput = {
    create?: XOR<ProcessBlockCreateWithoutInputsInput, ProcessBlockUncheckedCreateWithoutInputsInput>
    connectOrCreate?: ProcessBlockCreateOrConnectWithoutInputsInput
    upsert?: ProcessBlockUpsertWithoutInputsInput
    connect?: ProcessBlockWhereUniqueInput
    update?: XOR<XOR<ProcessBlockUpdateToOneWithWhereWithoutInputsInput, ProcessBlockUpdateWithoutInputsInput>, ProcessBlockUncheckedUpdateWithoutInputsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ProcessBlockCreateWithoutProcessInput = {
    id?: string
    name: string
    type: string
    data: string
    x?: number
    y?: number
    outputs?: ProcessBlockRelationCreateNestedManyWithoutOutputInput
    inputs?: ProcessBlockRelationCreateNestedManyWithoutInputInput
  }

  export type ProcessBlockUncheckedCreateWithoutProcessInput = {
    id?: string
    name: string
    type: string
    data: string
    x?: number
    y?: number
    outputs?: ProcessBlockRelationUncheckedCreateNestedManyWithoutOutputInput
    inputs?: ProcessBlockRelationUncheckedCreateNestedManyWithoutInputInput
  }

  export type ProcessBlockCreateOrConnectWithoutProcessInput = {
    where: ProcessBlockWhereUniqueInput
    create: XOR<ProcessBlockCreateWithoutProcessInput, ProcessBlockUncheckedCreateWithoutProcessInput>
  }

  export type ProcessBlockCreateManyProcessInputEnvelope = {
    data: ProcessBlockCreateManyProcessInput | ProcessBlockCreateManyProcessInput[]
  }

  export type ProcessBlockUpsertWithWhereUniqueWithoutProcessInput = {
    where: ProcessBlockWhereUniqueInput
    update: XOR<ProcessBlockUpdateWithoutProcessInput, ProcessBlockUncheckedUpdateWithoutProcessInput>
    create: XOR<ProcessBlockCreateWithoutProcessInput, ProcessBlockUncheckedCreateWithoutProcessInput>
  }

  export type ProcessBlockUpdateWithWhereUniqueWithoutProcessInput = {
    where: ProcessBlockWhereUniqueInput
    data: XOR<ProcessBlockUpdateWithoutProcessInput, ProcessBlockUncheckedUpdateWithoutProcessInput>
  }

  export type ProcessBlockUpdateManyWithWhereWithoutProcessInput = {
    where: ProcessBlockScalarWhereInput
    data: XOR<ProcessBlockUpdateManyMutationInput, ProcessBlockUncheckedUpdateManyWithoutProcessInput>
  }

  export type ProcessBlockScalarWhereInput = {
    AND?: ProcessBlockScalarWhereInput | ProcessBlockScalarWhereInput[]
    OR?: ProcessBlockScalarWhereInput[]
    NOT?: ProcessBlockScalarWhereInput | ProcessBlockScalarWhereInput[]
    id?: StringFilter<"ProcessBlock"> | string
    name?: StringFilter<"ProcessBlock"> | string
    type?: StringFilter<"ProcessBlock"> | string
    data?: StringFilter<"ProcessBlock"> | string
    x?: FloatFilter<"ProcessBlock"> | number
    y?: FloatFilter<"ProcessBlock"> | number
    processId?: StringFilter<"ProcessBlock"> | string
  }

  export type ProcessCreateWithoutBlocksInput = {
    id?: string
    name: string
  }

  export type ProcessUncheckedCreateWithoutBlocksInput = {
    id?: string
    name: string
  }

  export type ProcessCreateOrConnectWithoutBlocksInput = {
    where: ProcessWhereUniqueInput
    create: XOR<ProcessCreateWithoutBlocksInput, ProcessUncheckedCreateWithoutBlocksInput>
  }

  export type ProcessBlockRelationCreateWithoutOutputInput = {
    id?: string
    outputPort: string
    inputPort: string
    input: ProcessBlockCreateNestedOneWithoutInputsInput
  }

  export type ProcessBlockRelationUncheckedCreateWithoutOutputInput = {
    id?: string
    outputPort: string
    inputId: string
    inputPort: string
  }

  export type ProcessBlockRelationCreateOrConnectWithoutOutputInput = {
    where: ProcessBlockRelationWhereUniqueInput
    create: XOR<ProcessBlockRelationCreateWithoutOutputInput, ProcessBlockRelationUncheckedCreateWithoutOutputInput>
  }

  export type ProcessBlockRelationCreateManyOutputInputEnvelope = {
    data: ProcessBlockRelationCreateManyOutputInput | ProcessBlockRelationCreateManyOutputInput[]
  }

  export type ProcessBlockRelationCreateWithoutInputInput = {
    id?: string
    outputPort: string
    inputPort: string
    output: ProcessBlockCreateNestedOneWithoutOutputsInput
  }

  export type ProcessBlockRelationUncheckedCreateWithoutInputInput = {
    id?: string
    outputId: string
    outputPort: string
    inputPort: string
  }

  export type ProcessBlockRelationCreateOrConnectWithoutInputInput = {
    where: ProcessBlockRelationWhereUniqueInput
    create: XOR<ProcessBlockRelationCreateWithoutInputInput, ProcessBlockRelationUncheckedCreateWithoutInputInput>
  }

  export type ProcessBlockRelationCreateManyInputInputEnvelope = {
    data: ProcessBlockRelationCreateManyInputInput | ProcessBlockRelationCreateManyInputInput[]
  }

  export type ProcessUpsertWithoutBlocksInput = {
    update: XOR<ProcessUpdateWithoutBlocksInput, ProcessUncheckedUpdateWithoutBlocksInput>
    create: XOR<ProcessCreateWithoutBlocksInput, ProcessUncheckedCreateWithoutBlocksInput>
    where?: ProcessWhereInput
  }

  export type ProcessUpdateToOneWithWhereWithoutBlocksInput = {
    where?: ProcessWhereInput
    data: XOR<ProcessUpdateWithoutBlocksInput, ProcessUncheckedUpdateWithoutBlocksInput>
  }

  export type ProcessUpdateWithoutBlocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessUncheckedUpdateWithoutBlocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessBlockRelationUpsertWithWhereUniqueWithoutOutputInput = {
    where: ProcessBlockRelationWhereUniqueInput
    update: XOR<ProcessBlockRelationUpdateWithoutOutputInput, ProcessBlockRelationUncheckedUpdateWithoutOutputInput>
    create: XOR<ProcessBlockRelationCreateWithoutOutputInput, ProcessBlockRelationUncheckedCreateWithoutOutputInput>
  }

  export type ProcessBlockRelationUpdateWithWhereUniqueWithoutOutputInput = {
    where: ProcessBlockRelationWhereUniqueInput
    data: XOR<ProcessBlockRelationUpdateWithoutOutputInput, ProcessBlockRelationUncheckedUpdateWithoutOutputInput>
  }

  export type ProcessBlockRelationUpdateManyWithWhereWithoutOutputInput = {
    where: ProcessBlockRelationScalarWhereInput
    data: XOR<ProcessBlockRelationUpdateManyMutationInput, ProcessBlockRelationUncheckedUpdateManyWithoutOutputInput>
  }

  export type ProcessBlockRelationScalarWhereInput = {
    AND?: ProcessBlockRelationScalarWhereInput | ProcessBlockRelationScalarWhereInput[]
    OR?: ProcessBlockRelationScalarWhereInput[]
    NOT?: ProcessBlockRelationScalarWhereInput | ProcessBlockRelationScalarWhereInput[]
    id?: StringFilter<"ProcessBlockRelation"> | string
    outputId?: StringFilter<"ProcessBlockRelation"> | string
    outputPort?: StringFilter<"ProcessBlockRelation"> | string
    inputId?: StringFilter<"ProcessBlockRelation"> | string
    inputPort?: StringFilter<"ProcessBlockRelation"> | string
  }

  export type ProcessBlockRelationUpsertWithWhereUniqueWithoutInputInput = {
    where: ProcessBlockRelationWhereUniqueInput
    update: XOR<ProcessBlockRelationUpdateWithoutInputInput, ProcessBlockRelationUncheckedUpdateWithoutInputInput>
    create: XOR<ProcessBlockRelationCreateWithoutInputInput, ProcessBlockRelationUncheckedCreateWithoutInputInput>
  }

  export type ProcessBlockRelationUpdateWithWhereUniqueWithoutInputInput = {
    where: ProcessBlockRelationWhereUniqueInput
    data: XOR<ProcessBlockRelationUpdateWithoutInputInput, ProcessBlockRelationUncheckedUpdateWithoutInputInput>
  }

  export type ProcessBlockRelationUpdateManyWithWhereWithoutInputInput = {
    where: ProcessBlockRelationScalarWhereInput
    data: XOR<ProcessBlockRelationUpdateManyMutationInput, ProcessBlockRelationUncheckedUpdateManyWithoutInputInput>
  }

  export type ProcessBlockCreateWithoutOutputsInput = {
    id?: string
    name: string
    type: string
    data: string
    x?: number
    y?: number
    process: ProcessCreateNestedOneWithoutBlocksInput
    inputs?: ProcessBlockRelationCreateNestedManyWithoutInputInput
  }

  export type ProcessBlockUncheckedCreateWithoutOutputsInput = {
    id?: string
    name: string
    type: string
    data: string
    x?: number
    y?: number
    processId: string
    inputs?: ProcessBlockRelationUncheckedCreateNestedManyWithoutInputInput
  }

  export type ProcessBlockCreateOrConnectWithoutOutputsInput = {
    where: ProcessBlockWhereUniqueInput
    create: XOR<ProcessBlockCreateWithoutOutputsInput, ProcessBlockUncheckedCreateWithoutOutputsInput>
  }

  export type ProcessBlockCreateWithoutInputsInput = {
    id?: string
    name: string
    type: string
    data: string
    x?: number
    y?: number
    process: ProcessCreateNestedOneWithoutBlocksInput
    outputs?: ProcessBlockRelationCreateNestedManyWithoutOutputInput
  }

  export type ProcessBlockUncheckedCreateWithoutInputsInput = {
    id?: string
    name: string
    type: string
    data: string
    x?: number
    y?: number
    processId: string
    outputs?: ProcessBlockRelationUncheckedCreateNestedManyWithoutOutputInput
  }

  export type ProcessBlockCreateOrConnectWithoutInputsInput = {
    where: ProcessBlockWhereUniqueInput
    create: XOR<ProcessBlockCreateWithoutInputsInput, ProcessBlockUncheckedCreateWithoutInputsInput>
  }

  export type ProcessBlockUpsertWithoutOutputsInput = {
    update: XOR<ProcessBlockUpdateWithoutOutputsInput, ProcessBlockUncheckedUpdateWithoutOutputsInput>
    create: XOR<ProcessBlockCreateWithoutOutputsInput, ProcessBlockUncheckedCreateWithoutOutputsInput>
    where?: ProcessBlockWhereInput
  }

  export type ProcessBlockUpdateToOneWithWhereWithoutOutputsInput = {
    where?: ProcessBlockWhereInput
    data: XOR<ProcessBlockUpdateWithoutOutputsInput, ProcessBlockUncheckedUpdateWithoutOutputsInput>
  }

  export type ProcessBlockUpdateWithoutOutputsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    process?: ProcessUpdateOneRequiredWithoutBlocksNestedInput
    inputs?: ProcessBlockRelationUpdateManyWithoutInputNestedInput
  }

  export type ProcessBlockUncheckedUpdateWithoutOutputsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    processId?: StringFieldUpdateOperationsInput | string
    inputs?: ProcessBlockRelationUncheckedUpdateManyWithoutInputNestedInput
  }

  export type ProcessBlockUpsertWithoutInputsInput = {
    update: XOR<ProcessBlockUpdateWithoutInputsInput, ProcessBlockUncheckedUpdateWithoutInputsInput>
    create: XOR<ProcessBlockCreateWithoutInputsInput, ProcessBlockUncheckedCreateWithoutInputsInput>
    where?: ProcessBlockWhereInput
  }

  export type ProcessBlockUpdateToOneWithWhereWithoutInputsInput = {
    where?: ProcessBlockWhereInput
    data: XOR<ProcessBlockUpdateWithoutInputsInput, ProcessBlockUncheckedUpdateWithoutInputsInput>
  }

  export type ProcessBlockUpdateWithoutInputsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    process?: ProcessUpdateOneRequiredWithoutBlocksNestedInput
    outputs?: ProcessBlockRelationUpdateManyWithoutOutputNestedInput
  }

  export type ProcessBlockUncheckedUpdateWithoutInputsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    processId?: StringFieldUpdateOperationsInput | string
    outputs?: ProcessBlockRelationUncheckedUpdateManyWithoutOutputNestedInput
  }

  export type ProcessBlockCreateManyProcessInput = {
    id?: string
    name: string
    type: string
    data: string
    x?: number
    y?: number
  }

  export type ProcessBlockUpdateWithoutProcessInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    outputs?: ProcessBlockRelationUpdateManyWithoutOutputNestedInput
    inputs?: ProcessBlockRelationUpdateManyWithoutInputNestedInput
  }

  export type ProcessBlockUncheckedUpdateWithoutProcessInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    outputs?: ProcessBlockRelationUncheckedUpdateManyWithoutOutputNestedInput
    inputs?: ProcessBlockRelationUncheckedUpdateManyWithoutInputNestedInput
  }

  export type ProcessBlockUncheckedUpdateManyWithoutProcessInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
  }

  export type ProcessBlockRelationCreateManyOutputInput = {
    id?: string
    outputPort: string
    inputId: string
    inputPort: string
  }

  export type ProcessBlockRelationCreateManyInputInput = {
    id?: string
    outputId: string
    outputPort: string
    inputPort: string
  }

  export type ProcessBlockRelationUpdateWithoutOutputInput = {
    id?: StringFieldUpdateOperationsInput | string
    outputPort?: StringFieldUpdateOperationsInput | string
    inputPort?: StringFieldUpdateOperationsInput | string
    input?: ProcessBlockUpdateOneRequiredWithoutInputsNestedInput
  }

  export type ProcessBlockRelationUncheckedUpdateWithoutOutputInput = {
    id?: StringFieldUpdateOperationsInput | string
    outputPort?: StringFieldUpdateOperationsInput | string
    inputId?: StringFieldUpdateOperationsInput | string
    inputPort?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessBlockRelationUncheckedUpdateManyWithoutOutputInput = {
    id?: StringFieldUpdateOperationsInput | string
    outputPort?: StringFieldUpdateOperationsInput | string
    inputId?: StringFieldUpdateOperationsInput | string
    inputPort?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessBlockRelationUpdateWithoutInputInput = {
    id?: StringFieldUpdateOperationsInput | string
    outputPort?: StringFieldUpdateOperationsInput | string
    inputPort?: StringFieldUpdateOperationsInput | string
    output?: ProcessBlockUpdateOneRequiredWithoutOutputsNestedInput
  }

  export type ProcessBlockRelationUncheckedUpdateWithoutInputInput = {
    id?: StringFieldUpdateOperationsInput | string
    outputId?: StringFieldUpdateOperationsInput | string
    outputPort?: StringFieldUpdateOperationsInput | string
    inputPort?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessBlockRelationUncheckedUpdateManyWithoutInputInput = {
    id?: StringFieldUpdateOperationsInput | string
    outputId?: StringFieldUpdateOperationsInput | string
    outputPort?: StringFieldUpdateOperationsInput | string
    inputPort?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProcessCountOutputTypeDefaultArgs instead
     */
    export type ProcessCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcessCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProcessBlockCountOutputTypeDefaultArgs instead
     */
    export type ProcessBlockCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcessBlockCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProcessDefaultArgs instead
     */
    export type ProcessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcessDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProcessBlockDefaultArgs instead
     */
    export type ProcessBlockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcessBlockDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProcessBlockRelationDefaultArgs instead
     */
    export type ProcessBlockRelationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcessBlockRelationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}